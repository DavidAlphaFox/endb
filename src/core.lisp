(defpackage :endb/core
  (:use :cl)
  (:export #:main)
  (:import-from :bordeaux-threads)
  (:import-from :fset)
  (:import-from :endb/sql/db)
  (:import-from :endb/http)
  (:import-from :endb/lib)
  (:import-from :endb/lib/server)
  (:import-from :endb/sql)
  (:import-from :uiop)
  (:import-from :trivial-backtrace))
(in-package :endb/core)

(defun %endb-init (config)
  (endb/lib:log-info "version ~A" (endb/lib/server:get-endb-version))
  (let ((dbms (endb/sql/db:make-dbms :db (endb/sql:make-directory-db :directory (fset:lookup config "data_directory")))))
    (endb/sql/db:start-background-compaction
     (endb/sql/db:dbms-db dbms)
     (lambda ()
       (endb/sql/db:dbms-db dbms))
     (lambda (tx-fn)
       (bt:with-lock-held ((endb/sql/db:dbms-write-lock dbms))
         (let ((write-db (endb/sql:begin-write-tx (endb/sql/db:dbms-db dbms))))
           (funcall tx-fn write-db)
           (setf (endb/sql/db:dbms-db dbms) (endb/sql:commit-write-tx (endb/sql/db:dbms-db dbms) write-db)))))
     (lambda (path buffer)
       (endb/storage:store-put-object (endb/sql/db:db-store (endb/sql/db:dbms-db dbms)) path buffer)))
    (endb/sql/db:start-background-indexer (endb/sql/db:dbms-db dbms))
    dbms))

(defun %endb-close-dbms (dbms)
  (endb/lib:log-info "shutting down")
  (if (bt:acquire-lock (endb/sql/db:dbms-write-lock dbms) nil)
      (unwind-protect
           (endb/sql:db-close (endb/sql/db:dbms-db dbms))
        (bt:release-lock (endb/sql/db:dbms-write-lock dbms)))
      (endb/lib:log-warn "could not close the database cleanly")))

(defun %endb-main ()
  (handler-bind ((#+sbcl sb-sys:interactive-interrupt (lambda (e)
                                                        (declare (ignore e))
                                                        (return-from %endb-main 130)))
                 (error (lambda (e)
                          (endb/lib:log-error (format nil "~A" e))
                          (let ((backtrace (rest (ppcre:split "[\\n\\r]+" (trivial-backtrace:print-backtrace e :output nil)))))
                            (endb/lib:log-debug "~A~%~{~A~^~%~}" (string-trim " " (first backtrace)) (rest backtrace))
                            (return-from %endb-main 1)))))
    (unwind-protect
         (let ((dbms (%endb-init (endb/lib/server:parse-command-line))))
           (setf endb/lib:*panic-hook* (lambda ()
                                         (%endb-close-dbms dbms)))
           (endb/lib/server:start-server dbms #'endb/http:endb-query #'endb/http:endb-on-ws-message))
      (when endb/lib:*panic-hook*
        (funcall endb/lib:*panic-hook*)))))

(defun main ()
  (uiop:quit (%endb-main)))
